// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: userlogin.proto

#include "userlogin.pb.h"
#include "userlogin.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace userlogin {

static const char* User_method_names[] = {
  "/userlogin.User/AddUser",
  "/userlogin.User/LoginIn",
  "/userlogin.User/IsLogin",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddUser_(User_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoginIn_(User_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsLogin_(User_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::AddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::userlogin::AddReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddUser_, context, request, response);
}

void User::Stub::experimental_async::AddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddUser_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::AddUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::AddReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::userlogin::AddReply>* User::Stub::AsyncAddUserRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userlogin::AddReply>::Create(channel_.get(), cq, rpcmethod_AddUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userlogin::AddReply>* User::Stub::PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userlogin::AddReply>::Create(channel_.get(), cq, rpcmethod_AddUser_, context, request, false);
}

::grpc::Status User::Stub::LoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::userlogin::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoginIn_, context, request, response);
}

void User::Stub::experimental_async::LoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoginIn_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::LoginIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::LoginReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoginIn_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::userlogin::LoginReply>* User::Stub::AsyncLoginInRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userlogin::LoginReply>::Create(channel_.get(), cq, rpcmethod_LoginIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userlogin::LoginReply>* User::Stub::PrepareAsyncLoginInRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userlogin::LoginReply>::Create(channel_.get(), cq, rpcmethod_LoginIn_, context, request, false);
}

::grpc::Status User::Stub::IsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::userlogin::IsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsLogin_, context, request, response);
}

void User::Stub::experimental_async::IsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsLogin_, context, request, response, std::move(f));
}

void User::Stub::experimental_async::IsLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::IsReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsLogin_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::userlogin::IsReply>* User::Stub::AsyncIsLoginRaw(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userlogin::IsReply>::Create(channel_.get(), cq, rpcmethod_IsLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userlogin::IsReply>* User::Stub::PrepareAsyncIsLoginRaw(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userlogin::IsReply>::Create(channel_.get(), cq, rpcmethod_IsLogin_, context, request, false);
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::userlogin::UserInfo, ::userlogin::AddReply>(
          std::mem_fn(&User::Service::AddUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::userlogin::UserInfo, ::userlogin::LoginReply>(
          std::mem_fn(&User::Service::LoginIn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::userlogin::UserLoginInfo, ::userlogin::IsReply>(
          std::mem_fn(&User::Service::IsLogin), this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace userlogin

