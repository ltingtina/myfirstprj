// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userlogin.proto

#ifndef PROTOBUF_INCLUDED_userlogin_2eproto
#define PROTOBUF_INCLUDED_userlogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userlogin_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_userlogin_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_userlogin_2eproto();
namespace userlogin {
class AddReply;
class AddReplyDefaultTypeInternal;
extern AddReplyDefaultTypeInternal _AddReply_default_instance_;
class IsReply;
class IsReplyDefaultTypeInternal;
extern IsReplyDefaultTypeInternal _IsReply_default_instance_;
class LoginReply;
class LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserLoginInfo;
class UserLoginInfoDefaultTypeInternal;
extern UserLoginInfoDefaultTypeInternal _UserLoginInfo_default_instance_;
}  // namespace userlogin
namespace google {
namespace protobuf {
template<> ::userlogin::AddReply* Arena::CreateMaybeMessage<::userlogin::AddReply>(Arena*);
template<> ::userlogin::IsReply* Arena::CreateMaybeMessage<::userlogin::IsReply>(Arena*);
template<> ::userlogin::LoginReply* Arena::CreateMaybeMessage<::userlogin::LoginReply>(Arena*);
template<> ::userlogin::UserInfo* Arena::CreateMaybeMessage<::userlogin::UserInfo>(Arena*);
template<> ::userlogin::UserLoginInfo* Arena::CreateMaybeMessage<::userlogin::UserLoginInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace userlogin {

// ===================================================================

class UserInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:userlogin.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:userlogin.UserInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userlogin_2eproto;
};
// -------------------------------------------------------------------

class AddReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:userlogin.AddReply) */ {
 public:
  AddReply();
  virtual ~AddReply();

  AddReply(const AddReply& from);

  inline AddReply& operator=(const AddReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddReply(AddReply&& from) noexcept
    : AddReply() {
    *this = ::std::move(from);
  }

  inline AddReply& operator=(AddReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReply* internal_default_instance() {
    return reinterpret_cast<const AddReply*>(
               &_AddReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddReply* other);
  friend void swap(AddReply& a, AddReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddReply* New() const final {
    return CreateMaybeMessage<AddReply>(nullptr);
  }

  AddReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddReply& from);
  void MergeFrom(const AddReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rscode = 1;
  void clear_rscode();
  static const int kRscodeFieldNumber = 1;
  const ::std::string& rscode() const;
  void set_rscode(const ::std::string& value);
  #if LANG_CXX11
  void set_rscode(::std::string&& value);
  #endif
  void set_rscode(const char* value);
  void set_rscode(const char* value, size_t size);
  ::std::string* mutable_rscode();
  ::std::string* release_rscode();
  void set_allocated_rscode(::std::string* rscode);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:userlogin.AddReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rscode_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userlogin_2eproto;
};
// -------------------------------------------------------------------

class LoginReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:userlogin.LoginReply) */ {
 public:
  LoginReply();
  virtual ~LoginReply();

  LoginReply(const LoginReply& from);

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginReply(LoginReply&& from) noexcept
    : LoginReply() {
    *this = ::std::move(from);
  }

  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
               &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginReply* other);
  friend void swap(LoginReply& a, LoginReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginReply* New() const final {
    return CreateMaybeMessage<LoginReply>(nullptr);
  }

  LoginReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rscode = 1;
  void clear_rscode();
  static const int kRscodeFieldNumber = 1;
  const ::std::string& rscode() const;
  void set_rscode(const ::std::string& value);
  #if LANG_CXX11
  void set_rscode(::std::string&& value);
  #endif
  void set_rscode(const char* value);
  void set_rscode(const char* value, size_t size);
  ::std::string* mutable_rscode();
  ::std::string* release_rscode();
  void set_allocated_rscode(::std::string* rscode);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string handlecode = 3;
  void clear_handlecode();
  static const int kHandlecodeFieldNumber = 3;
  const ::std::string& handlecode() const;
  void set_handlecode(const ::std::string& value);
  #if LANG_CXX11
  void set_handlecode(::std::string&& value);
  #endif
  void set_handlecode(const char* value);
  void set_handlecode(const char* value, size_t size);
  ::std::string* mutable_handlecode();
  ::std::string* release_handlecode();
  void set_allocated_handlecode(::std::string* handlecode);

  // @@protoc_insertion_point(class_scope:userlogin.LoginReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rscode_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr handlecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userlogin_2eproto;
};
// -------------------------------------------------------------------

class UserLoginInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:userlogin.UserLoginInfo) */ {
 public:
  UserLoginInfo();
  virtual ~UserLoginInfo();

  UserLoginInfo(const UserLoginInfo& from);

  inline UserLoginInfo& operator=(const UserLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginInfo(UserLoginInfo&& from) noexcept
    : UserLoginInfo() {
    *this = ::std::move(from);
  }

  inline UserLoginInfo& operator=(UserLoginInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLoginInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginInfo* internal_default_instance() {
    return reinterpret_cast<const UserLoginInfo*>(
               &_UserLoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserLoginInfo* other);
  friend void swap(UserLoginInfo& a, UserLoginInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginInfo* New() const final {
    return CreateMaybeMessage<UserLoginInfo>(nullptr);
  }

  UserLoginInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLoginInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLoginInfo& from);
  void MergeFrom(const UserLoginInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string handlecode = 2;
  void clear_handlecode();
  static const int kHandlecodeFieldNumber = 2;
  const ::std::string& handlecode() const;
  void set_handlecode(const ::std::string& value);
  #if LANG_CXX11
  void set_handlecode(::std::string&& value);
  #endif
  void set_handlecode(const char* value);
  void set_handlecode(const char* value, size_t size);
  ::std::string* mutable_handlecode();
  ::std::string* release_handlecode();
  void set_allocated_handlecode(::std::string* handlecode);

  // @@protoc_insertion_point(class_scope:userlogin.UserLoginInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr handlecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userlogin_2eproto;
};
// -------------------------------------------------------------------

class IsReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:userlogin.IsReply) */ {
 public:
  IsReply();
  virtual ~IsReply();

  IsReply(const IsReply& from);

  inline IsReply& operator=(const IsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IsReply(IsReply&& from) noexcept
    : IsReply() {
    *this = ::std::move(from);
  }

  inline IsReply& operator=(IsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsReply* internal_default_instance() {
    return reinterpret_cast<const IsReply*>(
               &_IsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IsReply* other);
  friend void swap(IsReply& a, IsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IsReply* New() const final {
    return CreateMaybeMessage<IsReply>(nullptr);
  }

  IsReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IsReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IsReply& from);
  void MergeFrom(const IsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:userlogin.IsReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userlogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string name = 1;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:userlogin.UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.UserInfo.name)
}
#if LANG_CXX11
inline void UserInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.UserInfo.name)
}
#endif
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:userlogin.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:userlogin.UserInfo.name)
}

// string password = 2;
inline void UserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::password() const {
  // @@protoc_insertion_point(field_get:userlogin.UserInfo.password)
  return password_.GetNoArena();
}
inline void UserInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.UserInfo.password)
}
#if LANG_CXX11
inline void UserInfo::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.UserInfo.password)
}
#endif
inline void UserInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.UserInfo.password)
}
inline void UserInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.UserInfo.password)
}
inline ::std::string* UserInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.UserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_password() {
  // @@protoc_insertion_point(field_release:userlogin.UserInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:userlogin.UserInfo.password)
}

// -------------------------------------------------------------------

// AddReply

// string rscode = 1;
inline void AddReply::clear_rscode() {
  rscode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddReply::rscode() const {
  // @@protoc_insertion_point(field_get:userlogin.AddReply.rscode)
  return rscode_.GetNoArena();
}
inline void AddReply::set_rscode(const ::std::string& value) {
  
  rscode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.AddReply.rscode)
}
#if LANG_CXX11
inline void AddReply::set_rscode(::std::string&& value) {
  
  rscode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.AddReply.rscode)
}
#endif
inline void AddReply::set_rscode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rscode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.AddReply.rscode)
}
inline void AddReply::set_rscode(const char* value, size_t size) {
  
  rscode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.AddReply.rscode)
}
inline ::std::string* AddReply::mutable_rscode() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.AddReply.rscode)
  return rscode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReply::release_rscode() {
  // @@protoc_insertion_point(field_release:userlogin.AddReply.rscode)
  
  return rscode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReply::set_allocated_rscode(::std::string* rscode) {
  if (rscode != nullptr) {
    
  } else {
    
  }
  rscode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rscode);
  // @@protoc_insertion_point(field_set_allocated:userlogin.AddReply.rscode)
}

// string message = 2;
inline void AddReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddReply::message() const {
  // @@protoc_insertion_point(field_get:userlogin.AddReply.message)
  return message_.GetNoArena();
}
inline void AddReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.AddReply.message)
}
#if LANG_CXX11
inline void AddReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.AddReply.message)
}
#endif
inline void AddReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.AddReply.message)
}
inline void AddReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.AddReply.message)
}
inline ::std::string* AddReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.AddReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReply::release_message() {
  // @@protoc_insertion_point(field_release:userlogin.AddReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReply::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:userlogin.AddReply.message)
}

// -------------------------------------------------------------------

// LoginReply

// string rscode = 1;
inline void LoginReply::clear_rscode() {
  rscode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReply::rscode() const {
  // @@protoc_insertion_point(field_get:userlogin.LoginReply.rscode)
  return rscode_.GetNoArena();
}
inline void LoginReply::set_rscode(const ::std::string& value) {
  
  rscode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.LoginReply.rscode)
}
#if LANG_CXX11
inline void LoginReply::set_rscode(::std::string&& value) {
  
  rscode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.LoginReply.rscode)
}
#endif
inline void LoginReply::set_rscode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rscode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.LoginReply.rscode)
}
inline void LoginReply::set_rscode(const char* value, size_t size) {
  
  rscode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.LoginReply.rscode)
}
inline ::std::string* LoginReply::mutable_rscode() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.LoginReply.rscode)
  return rscode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReply::release_rscode() {
  // @@protoc_insertion_point(field_release:userlogin.LoginReply.rscode)
  
  return rscode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_rscode(::std::string* rscode) {
  if (rscode != nullptr) {
    
  } else {
    
  }
  rscode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rscode);
  // @@protoc_insertion_point(field_set_allocated:userlogin.LoginReply.rscode)
}

// string message = 2;
inline void LoginReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReply::message() const {
  // @@protoc_insertion_point(field_get:userlogin.LoginReply.message)
  return message_.GetNoArena();
}
inline void LoginReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.LoginReply.message)
}
#if LANG_CXX11
inline void LoginReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.LoginReply.message)
}
#endif
inline void LoginReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.LoginReply.message)
}
inline void LoginReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.LoginReply.message)
}
inline ::std::string* LoginReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.LoginReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReply::release_message() {
  // @@protoc_insertion_point(field_release:userlogin.LoginReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:userlogin.LoginReply.message)
}

// string handlecode = 3;
inline void LoginReply::clear_handlecode() {
  handlecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReply::handlecode() const {
  // @@protoc_insertion_point(field_get:userlogin.LoginReply.handlecode)
  return handlecode_.GetNoArena();
}
inline void LoginReply::set_handlecode(const ::std::string& value) {
  
  handlecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.LoginReply.handlecode)
}
#if LANG_CXX11
inline void LoginReply::set_handlecode(::std::string&& value) {
  
  handlecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.LoginReply.handlecode)
}
#endif
inline void LoginReply::set_handlecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handlecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.LoginReply.handlecode)
}
inline void LoginReply::set_handlecode(const char* value, size_t size) {
  
  handlecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.LoginReply.handlecode)
}
inline ::std::string* LoginReply::mutable_handlecode() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.LoginReply.handlecode)
  return handlecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReply::release_handlecode() {
  // @@protoc_insertion_point(field_release:userlogin.LoginReply.handlecode)
  
  return handlecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_handlecode(::std::string* handlecode) {
  if (handlecode != nullptr) {
    
  } else {
    
  }
  handlecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handlecode);
  // @@protoc_insertion_point(field_set_allocated:userlogin.LoginReply.handlecode)
}

// -------------------------------------------------------------------

// UserLoginInfo

// string name = 1;
inline void UserLoginInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginInfo::name() const {
  // @@protoc_insertion_point(field_get:userlogin.UserLoginInfo.name)
  return name_.GetNoArena();
}
inline void UserLoginInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.UserLoginInfo.name)
}
#if LANG_CXX11
inline void UserLoginInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.UserLoginInfo.name)
}
#endif
inline void UserLoginInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.UserLoginInfo.name)
}
inline void UserLoginInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.UserLoginInfo.name)
}
inline ::std::string* UserLoginInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.UserLoginInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginInfo::release_name() {
  // @@protoc_insertion_point(field_release:userlogin.UserLoginInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:userlogin.UserLoginInfo.name)
}

// string handlecode = 2;
inline void UserLoginInfo::clear_handlecode() {
  handlecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginInfo::handlecode() const {
  // @@protoc_insertion_point(field_get:userlogin.UserLoginInfo.handlecode)
  return handlecode_.GetNoArena();
}
inline void UserLoginInfo::set_handlecode(const ::std::string& value) {
  
  handlecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.UserLoginInfo.handlecode)
}
#if LANG_CXX11
inline void UserLoginInfo::set_handlecode(::std::string&& value) {
  
  handlecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.UserLoginInfo.handlecode)
}
#endif
inline void UserLoginInfo::set_handlecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handlecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.UserLoginInfo.handlecode)
}
inline void UserLoginInfo::set_handlecode(const char* value, size_t size) {
  
  handlecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.UserLoginInfo.handlecode)
}
inline ::std::string* UserLoginInfo::mutable_handlecode() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.UserLoginInfo.handlecode)
  return handlecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginInfo::release_handlecode() {
  // @@protoc_insertion_point(field_release:userlogin.UserLoginInfo.handlecode)
  
  return handlecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginInfo::set_allocated_handlecode(::std::string* handlecode) {
  if (handlecode != nullptr) {
    
  } else {
    
  }
  handlecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handlecode);
  // @@protoc_insertion_point(field_set_allocated:userlogin.UserLoginInfo.handlecode)
}

// -------------------------------------------------------------------

// IsReply

// string message = 1;
inline void IsReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IsReply::message() const {
  // @@protoc_insertion_point(field_get:userlogin.IsReply.message)
  return message_.GetNoArena();
}
inline void IsReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userlogin.IsReply.message)
}
#if LANG_CXX11
inline void IsReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userlogin.IsReply.message)
}
#endif
inline void IsReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userlogin.IsReply.message)
}
inline void IsReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userlogin.IsReply.message)
}
inline ::std::string* IsReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:userlogin.IsReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IsReply::release_message() {
  // @@protoc_insertion_point(field_release:userlogin.IsReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IsReply::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:userlogin.IsReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userlogin

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_userlogin_2eproto
