// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: userlogin.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_userlogin_2eproto__INCLUDED
#define GRPC_userlogin_2eproto__INCLUDED

#include "userlogin.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace userlogin {

// The userlogin service definition.
class User final {
 public:
  static constexpr char const* service_full_name() {
    return "userlogin.User";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // sign in
    virtual ::grpc::Status AddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::userlogin::AddReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::AddReply>> AsyncAddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::AddReply>>(AsyncAddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::AddReply>> PrepareAsyncAddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::AddReply>>(PrepareAsyncAddUserRaw(context, request, cq));
    }
    virtual ::grpc::Status LoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::userlogin::LoginReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::LoginReply>> AsyncLoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::LoginReply>>(AsyncLoginInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::LoginReply>> PrepareAsyncLoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::LoginReply>>(PrepareAsyncLoginInRaw(context, request, cq));
    }
    virtual ::grpc::Status IsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::userlogin::IsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::IsReply>> AsyncIsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::IsReply>>(AsyncIsLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::IsReply>> PrepareAsyncIsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::IsReply>>(PrepareAsyncIsLoginRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // sign in
      virtual void AddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::AddReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoginIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::LoginReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::IsReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::AddReply>* AsyncAddUserRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::AddReply>* PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::LoginReply>* AsyncLoginInRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::LoginReply>* PrepareAsyncLoginInRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::IsReply>* AsyncIsLoginRaw(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userlogin::IsReply>* PrepareAsyncIsLoginRaw(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::userlogin::AddReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::AddReply>> AsyncAddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::AddReply>>(AsyncAddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::AddReply>> PrepareAsyncAddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::AddReply>>(PrepareAsyncAddUserRaw(context, request, cq));
    }
    ::grpc::Status LoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::userlogin::LoginReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::LoginReply>> AsyncLoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::LoginReply>>(AsyncLoginInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::LoginReply>> PrepareAsyncLoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::LoginReply>>(PrepareAsyncLoginInRaw(context, request, cq));
    }
    ::grpc::Status IsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::userlogin::IsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::IsReply>> AsyncIsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::IsReply>>(AsyncIsLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::IsReply>> PrepareAsyncIsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userlogin::IsReply>>(PrepareAsyncIsLoginRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddUser(::grpc::ClientContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response, std::function<void(::grpc::Status)>) override;
      void AddUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::AddReply* response, std::function<void(::grpc::Status)>) override;
      void LoginIn(::grpc::ClientContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response, std::function<void(::grpc::Status)>) override;
      void LoginIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::LoginReply* response, std::function<void(::grpc::Status)>) override;
      void IsLogin(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response, std::function<void(::grpc::Status)>) override;
      void IsLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userlogin::IsReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::userlogin::AddReply>* AsyncAddUserRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userlogin::AddReply>* PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userlogin::LoginReply>* AsyncLoginInRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userlogin::LoginReply>* PrepareAsyncLoginInRaw(::grpc::ClientContext* context, const ::userlogin::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userlogin::IsReply>* AsyncIsLoginRaw(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userlogin::IsReply>* PrepareAsyncIsLoginRaw(::grpc::ClientContext* context, const ::userlogin::UserLoginInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddUser_;
    const ::grpc::internal::RpcMethod rpcmethod_LoginIn_;
    const ::grpc::internal::RpcMethod rpcmethod_IsLogin_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // sign in
    virtual ::grpc::Status AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response);
    virtual ::grpc::Status LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response);
    virtual ::grpc::Status IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUser(::grpc::ServerContext* context, ::userlogin::UserInfo* request, ::grpc::ServerAsyncResponseWriter< ::userlogin::AddReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoginIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoginIn() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoginIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginIn(::grpc::ServerContext* context, ::userlogin::UserInfo* request, ::grpc::ServerAsyncResponseWriter< ::userlogin::LoginReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IsLogin() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_IsLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsLogin(::grpc::ServerContext* context, ::userlogin::UserLoginInfo* request, ::grpc::ServerAsyncResponseWriter< ::userlogin::IsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddUser<WithAsyncMethod_LoginIn<WithAsyncMethod_IsLogin<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddUser() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::userlogin::UserInfo, ::userlogin::AddReply>(
          [this](::grpc::ServerContext* context,
                 const ::userlogin::UserInfo* request,
                 ::userlogin::AddReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddUser(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoginIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_LoginIn() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::userlogin::UserInfo, ::userlogin::LoginReply>(
          [this](::grpc::ServerContext* context,
                 const ::userlogin::UserInfo* request,
                 ::userlogin::LoginReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->LoginIn(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_LoginIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_IsLogin() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::userlogin::UserLoginInfo, ::userlogin::IsReply>(
          [this](::grpc::ServerContext* context,
                 const ::userlogin::UserLoginInfo* request,
                 ::userlogin::IsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->IsLogin(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_IsLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_AddUser<ExperimentalWithCallbackMethod_LoginIn<ExperimentalWithCallbackMethod_IsLogin<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoginIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoginIn() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoginIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IsLogin() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_IsLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoginIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LoginIn() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoginIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IsLogin() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_IsLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddUser() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddUser(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddUser(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoginIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_LoginIn() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->LoginIn(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_LoginIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LoginIn(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_IsLogin() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->IsLogin(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_IsLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IsLogin(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::userlogin::UserInfo, ::userlogin::AddReply>(std::bind(&WithStreamedUnaryMethod_AddUser<BaseClass>::StreamedAddUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::AddReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userlogin::UserInfo,::userlogin::AddReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoginIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoginIn() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::userlogin::UserInfo, ::userlogin::LoginReply>(std::bind(&WithStreamedUnaryMethod_LoginIn<BaseClass>::StreamedLoginIn, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoginIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoginIn(::grpc::ServerContext* context, const ::userlogin::UserInfo* request, ::userlogin::LoginReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoginIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userlogin::UserInfo,::userlogin::LoginReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IsLogin() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::userlogin::UserLoginInfo, ::userlogin::IsReply>(std::bind(&WithStreamedUnaryMethod_IsLogin<BaseClass>::StreamedIsLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IsLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsLogin(::grpc::ServerContext* context, const ::userlogin::UserLoginInfo* request, ::userlogin::IsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userlogin::UserLoginInfo,::userlogin::IsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddUser<WithStreamedUnaryMethod_LoginIn<WithStreamedUnaryMethod_IsLogin<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddUser<WithStreamedUnaryMethod_LoginIn<WithStreamedUnaryMethod_IsLogin<Service > > > StreamedService;
};

}  // namespace userlogin


#endif  // GRPC_userlogin_2eproto__INCLUDED
